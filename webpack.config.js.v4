const path = require('path');

const webpack = require('webpack');
const ExtractTextPlugin = require("extract-text-webpack-plugin");
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');


const ROOT_PATH = path.resolve(__dirname, 'wwwroot');
const FEND_PATH = path.resolve(__dirname, 'Frontend');

const isProd = false;

const plugins = [
    new ExtractTextPlugin({
        filename: isProd ? '[name].min.css' : '[name].css',
        allChunks: true
    }),
    // new OptimizeCssAssetsPlugin({
    //     assetNameRegExp: /\.min\.css$/,
    //     cssProcessorOptions: { discardComments: { removeAll: true } }
    // }),
    // new webpack.optimize.UglifyJsPlugin({
    //     include: /\.min\.js$/,
    //     minimize: true
    // })
];

module.exports = {
    plugins,

    node: {
        dns: 'mock',
        net: 'mock'
    },

    entry: {
        main: [
            FEND_PATH + '/index.jsx'
        ],
        vendor: [
            'fetch',
            'bootstrap/dist/css/bootstrap.css',
            'react-datepicker/dist/react-datepicker.css'
        ]
    },

    output: {
        path: ROOT_PATH + '/dist',
        filename: isProd ? '[name].min.js' : '[name].js',
        //publicPath: '/dist/'
    },

    module: {
        rules: [
            {
                test: /\.(png|jpg|jpeg|gif)$/,
                loader: 'url-loader',
                options: {
                    limit: 50000,
                    name: 'assets/[name]_[hash].[ext]'
                }
            },
            {
                test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "url-loader",
                options: {
                    limit: 10000,
                    name: 'assets/[name]_[hash].[ext]',
                    mimetype: 'application/font-woff'
                }
            },
            {
                test: /\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "file-loader",
                options: {
                    limit: 50000,
                    name: 'assets/[name]_[hash].[ext]'
                }
            },
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                use: {
                    loader: "babel-loader"
                }
            },
            {
                test: /\.(css|scss)$/,
                use: ExtractTextPlugin.extract({
                    fallback: 'style-loader',
                    use: ['css-loader', 'postcss-loader', 'sass-loader']
                })
            }
        ]
    }
};